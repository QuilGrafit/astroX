import os
import logging
import hashlib
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, ReplyKeyboardRemove
import asyncio
import re
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
from fastapi import Request

from fastapi import FastAPI

# --- –î–û–ë–ê–í–õ–ï–ù–´ –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø WEBHOOK –ò AIOHTTP ---
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from urllib.parse import urlparse
# --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ò–ú–ü–û–†–¢–û–í ---

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ---
load_dotenv()
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render)
TOKEN = os.getenv("BOT_TOKEN")
TON_WALLET = os.getenv("TON_WALLET_ADDRESS")
ADSGRAM_API_KEY = os.getenv("ADSGRAM_API_KEY")
MONGO_URI = os.getenv("MONGO_URI")
MONGO_DB_NAME = os.getenv("MONGO_DB_NAME", "AstroBotDB")
MONGO_COLLECTION_NAME = os.getenv("MONGO_COLLECTION_NAME", "users")
WEBHOOK_DOMAIN = "astrox-mfuk.onrender.com"
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "astrox-mfuk.onrender.com")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise ValueError("Environment variable BOT_TOKEN is not set.")
if not TON_WALLET:
    raise ValueError("Environment variable TON_WALLET_ADDRESS is not set.")

# --- –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK –î–õ–Ø RENDER ---
# WEBHOOK_HOST - —ç—Ç–æ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ Render (–Ω–∞–ø—Ä–∏–º–µ—Ä, my-astro-bot.onrender.com)
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"
# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
WEB_SERVER_PORT = os.getenv('PORT', 8080)
# –ü–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Telegram
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ WEBHOO_PATH –Ω–∞ WEBHOOK_PATH
WEBHOOK_URL = f"https://{WEBHOOK_HOST}/webhook/{TOKEN}" if WEBHOOK_HOST else None
# –ü—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—á–∞—Å—Ç—å WEBHOOK_URL)
WEBHOOK_PATH = f"/webhook/{TOKEN}"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö WEBHOOK ---

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s') # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB ---
# –ö–ª–∏–µ–Ω—Ç MongoDB
mongo_client: AsyncIOMotorClient = None
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
db = None
users_collection = None

async def init_mongodb():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MongoDB –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
    global mongo_client, db, users_collection
    if MONGO_URI: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URI –∑–∞–¥–∞–Ω, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        try:
            mongo_client = AsyncIOMotorClient(MONGO_URI)
            db = mongo_client[MONGO_DB_NAME]
            users_collection = db[MONGO_COLLECTION_NAME]
            logger.info(f"MongoDB —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '{MONGO_DB_NAME}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}", exc_info=True)
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB.")
    else:
        logger.warning("MONGO_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class Form(StatesGroup):
    set_birth_date = State()
    select_sign = State() # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
    select_language = State() # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
    magic_ball_answer = State()

# --- –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π) ---
TEXTS = {
    "ru": {
        "welcome": "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Cosmic Insight</b> - –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω!\n\n"
                   "–ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ –Ω–µ–±–µ—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.",
        "main_menu_horoscope": "üåü –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø",
        "main_menu_settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "main_menu_support": "‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å",
        "main_menu_entertainment": "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "support_us_prompt": "üíé –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ª—é–±—É—é —Å—É–º–º—É TON</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
                             "<code>{wallet}</code>\n\n"
                             "–î–ª—è —ç—Ç–æ–≥–æ:\n"
                             "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å @wallet'.\n"
                             "2. –í –±–æ—Ç–µ @wallet –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.\n"
                             "3. –í—Å—Ç–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã—à–µ –∞–¥—Ä–µ—Å.\n"
                             "4. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É.",
        "settings_menu_choose": "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        "settings_change_sign": "–ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞",
        "settings_set_birth_date": "–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è",
        "settings_change_language": "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "choose_sign": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        "sign_set_success": "‚úÖ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ <b>{sign}</b>.",
        "sign_changed_answer": "–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω!",
        "donate_open_wallet": "–û—Ç–∫—Ä—ã—Ç—å @wallet",
        "donate_closed": "–û–∫–Ω–æ –¥–æ–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–æ.",
        "birth_date_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        "birth_date_invalid_format": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000).",
        "birth_date_future_error": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.",
        "birth_date_success": "‚úÖ –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è <b>{birth_date}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        "birth_date_changed_answer": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        "choose_language_prompt": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "language_set_success": "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{lang_name}</b>.",
        "language_changed_answer": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!",
        "ad_text": "‚ú® <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b> ‚ú®\n\n"
                   "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —ç—Ç–∏–º —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º!",
        "ad_button": "–ü–æ—Å–µ—Ç–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞",
        "horoscope_title": "{emoji} <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø</b>",
        "horoscope_sign": "üîÆ –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞: {sign} ({element})",
        "horoscope_date": "üìÖ –î–∞—Ç–∞: {date}",
        "horoscope_age": "üéÇ –í–∞–º {age} {years}!",
        "horoscope_mood": "üåà –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω—è: <b>{mood}</b>",
        "horoscope_lucky_color": "üçÄ –°—á–∞—Å—Ç–ª–∏–≤—ã–π —Ü–≤–µ—Ç: <b>{color}</b>",
        "horoscope_lucky_number": "üî¢ –ß–∏—Å–ª–æ —É–¥–∞—á–∏: <b>{number}</b>",
        "horoscope_ruling_planet": "ü™ê –ü–ª–∞–Ω–µ—Ç–∞-–ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å: <b>{planet}</b>",
        "horoscope_lucky_stone": "üíé –ö–∞–º–µ–Ω—å —É–¥–∞—á–∏: <b>{stone}</b>",
        "horoscope_compatibility": "üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: <b>{compatible_signs}</b>",
        "horoscope_tip": "üí° <b>–°–æ–≤–µ—Ç –¥–Ω—è:</b> {tip}",
        "horoscope_love": "üíñ –õ—é–±–æ–≤—å",
        "horoscope_career": "üíº –ö–∞—Ä—å–µ—Ä–∞",
        "horoscope_finance": "üí∞ –§–∏–Ω–∞–Ω—Å—ã",
        "horoscope_health": "üè• –ó–¥–æ—Ä–æ–≤—å–µ",
        "horoscope_closing_message": "–ü–æ–º–Ω–∏—Ç–µ, –∑–≤–µ–∑–¥—ã –ª–∏—à—å –Ω–∞–º–µ–∫–∞—é—Ç, –∞ –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –∑–∞ –≤–∞–º–∏! –ñ–µ–ª–∞–µ–º –≤–∞–º –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –¥–Ω—è! ‚ú®",
        "years_singular": "–≥–æ–¥",
        "years_plural_2_4": "–≥–æ–¥–∞",
        "years_plural_5_plus": "–ª–µ—Ç",
        "compatibility_not_defined": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
        "horoscope_tips": [
            "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏; –æ–Ω–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –≤–∞—Å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é.",
            "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Å–º–µ–ª—ã—Ö –∏–¥–µ–π.",
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏ ‚Äî –≤ –Ω–∏—Ö –∫—Ä–æ–µ—Ç—Å—è –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.",
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏; —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å.",
            "–ù–µ –±–æ–π—Ç–µ—Å—å —Ä–∏—Å–∫–æ–≤–∞—Ç—å, –Ω–æ –¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –º—É–¥—Ä–æ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.",
            "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö, –∏ –≤—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –∂–µ–ª–∞–µ–º–æ–≥–æ.",
            "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ –ø—Ä–∏–≤–ª–µ—á–µ—Ç –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–∞ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å.",
            "–ù–∞–π–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è."
        ],
        # –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞, —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–ª–∞–Ω–µ—Ç, –∫–∞–º–Ω–µ–π
        "sign_aries": "–û–≤–µ–Ω", "sign_taurus": "–¢–µ–ª–µ—Ü", "sign_gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "sign_cancer": "–†–∞–∫",
        "sign_leo": "–õ–µ–≤", "sign_virgo": "–î–µ–≤–∞", "sign_libra": "–í–µ—Å—ã", "sign_scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω",
        "sign_sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü", "sign_capricorn": "–ö–æ–∑–µ—Ä–æ–≥", "sign_aquarius": "–í–æ–¥–æ–ª–µ–π", "sign_pisces": "–†—ã–±—ã",
        
        "element_fire": "–û–≥–æ–Ω—å", "element_earth": "–ó–µ–º–ª—è", "element_air": "–í–æ–∑–¥—É—Ö", "element_water": "–í–æ–¥–∞",

        "planet_mars": "–ú–∞—Ä—Å", "planet_venus": "–í–µ–Ω–µ—Ä–∞", "planet_mercury": "–ú–µ—Ä–∫—É—Ä–∏–π", "planet_moon": "–õ—É–Ω–∞",
        "planet_sun": "–°–æ–ª–Ω—Ü–µ", "planet_pluto": "–ü–ª—É—Ç–æ–Ω", "planet_jupiter": "–Æ–ø–∏—Ç–µ—Ä", "planet_saturn": "–°–∞—Ç—É—Ä–Ω",
        "planet_uranus": "–£—Ä–∞–Ω", "planet_neptune": "–ù–µ–ø—Ç—É–Ω", "planet_crystal": "–ö—Ä–∏—Å—Ç–∞–ª–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", # –¥–ª—è –∫–∞–º–Ω—è
        
        "stone_diamond": "–ê–ª–º–∞–∑", "stone_emerald": "–ò–∑—É–º—Ä—É–¥", "stone_agate": "–ê–≥–∞—Ç", "stone_pearl": "–ñ–µ–º—á—É–≥",
        "stone_ruby": "–†—É–±–∏–Ω", "stone_sapphire": "–°–∞–ø—Ñ–∏—Ä", "stone_opal": "–û–ø–∞–ª", "stone_topaz": "–¢–æ–ø–∞–∑",
        "stone_turquoise": "–ë–∏—Ä—é–∑–∞", "stone_garnet": "–ì—Ä–∞–Ω–∞—Ç", "stone_amethyst": "–ê–º–µ—Ç–∏—Å—Ç", "stone_aquamarine": "–ê–∫–≤–∞–º–∞—Ä–∏–Ω",

        # –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        "entertainment_menu_choose": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ:",
        "cookie_button": "üç™ –ü–µ—á–µ–Ω—å–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º",
        "magic_ball_button": "üîÆ –®–∞—Ä —Å –æ—Ç–≤–µ—Ç–∞–º–∏",
        "cookie_fortune_message": "üç™ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: <b>{fortune}</b>",
        "magic_ball_question_prompt": "üîÆ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –®–∞—Ä—É (–æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'):",
        "magic_ball_answer_message": "üîÆ –û—Ç–≤–µ—Ç –®–∞—Ä–∞: <b>{answer}</b>",
        "magic_ball_not_a_question": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
    }
}

# –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
SHARE_MESSAGE_RU = "üîÆ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –ø–æ –∑–≤–µ–∑–¥–∞–º? –ü–æ–ª—É—á–∞–π —Å–≤–æ–π –ª–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å Cosmic Insight! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã, –∞ –≥–ª—É–±–æ–∫–∏–π –≤–∑–≥–ª—è–¥ –≤ —Ç–≤–æ—é —Å—É–¥—å–±—É. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –∏—Å—Å–ª–µ–¥—É–π —Å–≤–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å! ‚ú®\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞]"


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ ---
# –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
# –ï—Å–ª–∏ MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
_user_data_cache = {} # –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

async def get_user_data(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB –∏–ª–∏ –∏–∑ –∫—ç—à–∞."""
    if users_collection is not None: # Corrected line
        user_data = await users_collection.find_one({"_id": user_id})
        if user_data:
            _user_data_cache[user_id] = user_data # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–∑ –ë–î
            return user_data
    # –ï—Å–ª–∏ MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—â–µ–º –≤ –∫—ç—à–µ
    return _user_data_cache.get(user_id, {"_id": user_id, "sign": "aries", "lang": "ru", "birth_date": None})

async def update_user_data(user_id: int, key: str, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB –∏ –≤ –∫—ç—à–µ."""
    user_id_str = str(user_id)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    current_data = _user_data_cache.get(user_id_str, {"_id": user_id_str, "sign": "aries", "lang": "ru", "birth_date": None})
    current_data[key] = value
    _user_data_cache[user_id_str] = current_data

    if users_collection is not None:
        await users_collection.update_one(
            {"_id": user_id_str},
            {"$set": {key: value}},
            upsert=True
        )
    else:
        logger.warning(f"MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏.")


# –§—É–Ω–∫—Ü–∏—è get_text —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_text_async(user_id: int, key: str) -> str:
    user_data = await get_user_data(user_id)
    lang = user_data.get("lang", "ru")
    return TEXTS.get(lang, TEXTS["ru"]).get(key, f"_{key}_")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
class HoroscopeGenerator:
    SIGNS = {
        "aries": {"emoji": "‚ôàÔ∏è", "element_key": "element_fire", "character": ["—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "—Å–º–µ–ª—ã–π", "–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π"], "planet_key": "planet_mars", "lucky_number": [9], "lucky_stone_key": "stone_diamond"},
        "taurus": {"emoji": "‚ôâÔ∏è", "element_key": "element_earth", "character": ["—Å—Ç–∞–±–∏–ª—å–Ω—ã–π", "—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π", "—É–ø—Ä—è–º—ã–π"], "planet_key": "planet_venus", "lucky_number": [6], "lucky_stone_key": "stone_emerald"},
        "gemini": {"emoji": "‚ôäÔ∏è", "element_key": "element_air", "character": ["–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π", "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π", "–Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π"], "planet_key": "planet_mercury", "lucky_number": [5], "lucky_stone_key": "stone_agate"},
        "cancer": {"emoji": "‚ôãÔ∏è", "element_key": "element_water", "character": ["–∑–∞–±–æ—Ç–ª–∏–≤—ã–π", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–∑–∞—â–∏—Ç–Ω–∏–∫"], "planet_key": "planet_moon", "lucky_number": [2], "lucky_stone_key": "stone_pearl"},
        "leo": {"emoji": "‚ôåÔ∏è", "element_key": "element_fire", "character": ["—É–≤–µ—Ä–µ–Ω–Ω—ã–π", "—â–µ–¥—Ä—ã–π", "–≤–ª–∞—Å—Ç–Ω—ã–π"], "planet_key": "planet_sun", "lucky_number": [1], "lucky_stone_key": "stone_ruby"},
        "virgo": {"emoji": "‚ôçÔ∏è", "element_key": "element_earth", "character": ["–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π", "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "–∫—Ä–∏—Ç–∏—á–Ω—ã–π"], "planet_key": "planet_mercury", "lucky_number": [5], "lucky_stone_key": "stone_sapphire"},
        "libra": {"emoji": "‚ôéÔ∏è", "element_key": "element_air", "character": ["–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π", "–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π", "–Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π"], "planet_key": "planet_venus", "lucky_number": [6], "lucky_stone_key": "stone_opal"},
        "scorpio": {"emoji": "‚ôèÔ∏è", "element_key": "element_water", "character": ["–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π", "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π", "—Å–∫—Ä—ã—Ç–Ω—ã–π"], "planet_key": "planet_pluto", "lucky_number": [8], "lucky_stone_key": "stone_topaz"},
        "sagittarius": {"emoji": "‚ôêÔ∏è", "element_key": "element_fire", "character": ["–∞–≤–∞–Ω—Ç—é—Ä–Ω—ã–π", "–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "–±–µ—Å–ø–æ–∫–æ–π–Ω—ã–π"], "planet_key": "planet_jupiter", "lucky_number": [3], "lucky_stone_key": "stone_turquoise"},
        "capricorn": {"emoji": "‚ôëÔ∏è", "element_key": "element_earth", "character": ["–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π"], "planet_key": "planet_saturn", "lucky_number": [8], "lucky_stone_key": "stone_garnet"},
        "aquarius": {"emoji": "‚ôíÔ∏è", "element_key": "element_air", "character": ["–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π", "–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π", "–±–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"], "planet_key": "planet_uranus", "lucky_number": [4], "lucky_stone_key": "stone_amethyst"},
        "pisces": {"emoji": "‚ôìÔ∏è", "element_key": "element_water", "character": ["—Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π", "–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π", "—Å–∫–ª–æ–Ω–Ω—ã–π –∫ —ç—Å–∫–∞–ø–∏–∑–º—É"], "planet_key": "planet_neptune", "lucky_number": [7], "lucky_stone_key": "stone_aquamarine"},
    }

    MOODS = {
        "ru": ["–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ", "–ó–∞–¥—É–º—á–∏–≤–æ–µ", "–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", "–°–ø–æ–∫–æ–π–Ω–æ–µ", "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ", "–†–∞–¥–æ—Å—Ç–Ω–æ–µ", "–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ", "–ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ", "–ù–∞–¥–µ–∂–Ω–æ–µ"],
    }
    LUCKY_COLORS = {
        "ru": ["–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–ó–æ–ª–æ—Ç–æ–π", "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–†–æ–∑–æ–≤—ã–π", "–ñ–µ–ª—Ç—ã–π", "–ë–∏—Ä—é–∑–æ–≤—ã–π", "–õ–∞–≤–∞–Ω–¥–æ–≤—ã–π"],
    }
    COMPATIBILITY = {
        "aries": ["leo", "sagittarius", "gemini", "aquarius"], "taurus": ["virgo", "capricorn", "cancer", "pisces"],
        "gemini": ["libra", "aquarius", "aries", "leo"], "cancer": ["scorpio", "pisces", "taurus", "virgo"],
        "leo": ["aries", "sagittarius", "gemini", "libra"], "virgo": ["taurus", "capricorn", "cancer", "scorpio"],
        "libra": ["gemini", "aquarius", "leo", "sagittarius"], "scorpio": ["cancer", "pisces", "virgo", "capricorn"],
        "sagittarius": ["aries", "leo", "libra", "aquarius"], "capricorn": ["taurus", "virgo", "scorpio", "pisces"],
        "aquarius": ["gemini", "libra", "aries", "sagittarius"], "pisces": ["cancer", "scorpio", "taurus", "capricorn"],
    }

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è "–ü–µ—á–µ–Ω—å—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏"
    COOKIE_FORTUNES = [
        "–í–∞—Å –∂–¥–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —É–¥–∞—á–∞.",
        "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.",
        "–°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
        "–í–∞—à–∞ –¥–æ–±—Ä–æ—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞.",
        "–ù–µ –±–æ–π—Ç–µ—Å—å –ø–µ—Ä–µ–º–µ–Ω, –æ–Ω–∏ –∫ –ª—É—á—à–µ–º—É.",
        "–í–∞—Å –∂–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞.",
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞—Ö.",
        "–í–∞—à–µ —É–ø–æ—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø–ª–æ–¥—ã.",
        "–ù–∞–π–¥–∏—Ç–µ —Ä–∞–¥–æ—Å—Ç—å –≤ –º–µ–ª–æ—á–∞—Ö.",
        "–í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.",
        "–î–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
        "–ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π."
    ]

    # –û—Ç–≤–µ—Ç—ã –¥–ª—è "–®–∞—Ä–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏"
    MAGIC_BALL_ANSWERS = {
        "positive": [
            "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ!", "–î–∞.", "–í–µ—Å—å–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ.", "–ú–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º.", "–î–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ.",
            "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è.", "–ö–∞–∫ —è –≤–∏–∂—É, –¥–∞."
        ],
        "negative": [
            "–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç.", "–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.", "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ.", "–ù–µ—Ç.", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ."
        ],
        "neutral": [
            "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞.", "–û—Ç–≤–µ—Ç –Ω–µ—è—Å–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", "–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å.",
            "–ù–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å."
        ]
    }


    @staticmethod
    async def _generate_aspect_description(aspect: str, score: int, rng: random.Random, lang: str) -> str:
        descriptions = {
            TEXTS[lang]["horoscope_love"]: {
                (8, 10): {
                    "ru": ["‚ú® –°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –Ω–∞ –ø–∏–∫–µ! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –∏ —É–≥–ª—É–±–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π. –û—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤—ã–º —á—É–≤—Å—Ç–≤–∞–º, –∏ –ø—É—Å—Ç—å –≤–∞—à–∞ –¥—É—à–∞ —Ä–∞—Å—Ü–≤–µ—Ç–µ—Ç!",
                           "üíñ –°–µ—Ä–¥—Ü–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ–ø–ª–æ–º –∏ –≥–∞—Ä–º–æ–Ω–∏–µ–π. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã –æ—Ç –±–ª–∏–∑–∫–∏—Ö –∏–ª–∏ –Ω–æ–≤—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–æ–π!"]
                },
                (5, 7): {
                    "ru": ["üåü –í –ª—é–±–≤–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ù–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ –∂–µ—Å—Ç—ã –≤–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–∫—Ä–µ–ø—è—Ç –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.",
                           "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –Ω–µ–∂–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å —Ç–µ–º–∏, –∫—Ç–æ –≤–∞–º –¥–æ—Ä–æ–≥, –∏ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–∏–ª–∏–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è."]
                },
                (3, 4): {
                    "ru": ["‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ —Å–ª–æ–≤–∞—Ö, —á—Ç–æ–±—ã –Ω–µ–Ω–∞—Ä–æ–∫–æ–º –Ω–µ —Ä–∞–Ω–∏—Ç—å —á—É–≤—Å—Ç–≤–∞ –±–ª–∏–∑–∫–∏—Ö. –ù–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –Ω–æ –∏—Ö –ª–µ–≥–∫–æ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å—é.",
                           "üíî –í–æ–∑–º–æ–∂–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏ –æ–±—Ä–µ—Å—Ç–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ."]
                },
                (1, 2): {
                    "ru": ["üö® –°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –≤—ã—è—Å–Ω–µ–Ω–∏–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –¥–∞–π—Ç–µ —Å–µ–±–µ –≤—Ä–µ–º—è –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
                           "üòî –ú–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏. –í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ. –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤—Å–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Å–µ—Ä–¥—Ü—É, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π."]
                }
            },
            TEXTS[lang]["horoscope_career"]: {
                (8, 10): {
                    "ru": ["üöÄ –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å—É—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø–ª–æ–¥—ã! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. –í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!",
                           "üìà –°–º–µ–ª–æ –±–µ—Ä–∏—Ç–µ—Å—å –∑–∞ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî —É—Å–ø–µ—Ö –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω. –í–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–∂–∞–µ—Ç, –∏ –≤–∞—à–∏ —É—Å–∏–ª–∏—è –±—É–¥—É—Ç —â–µ–¥—Ä–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω—ã!"]
                },
                (5, 7): {
                    "ru": ["üíº –†–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç—Å—è –±–µ–∑ –æ—Å–æ–±—ã—Ö –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ, –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ.",
                           "üìö –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –≤–∞–º –≤ –±—É–¥—É—â–µ–º, –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω–Ω—ã."]
                },
                (3, 4): {
                    "ru": ["üìâ –ú–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –∏—Ö.",
                           "‚è≥ –°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–∏—á–µ–≥–æ —Å–ª–∏—à–∫–æ–º –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ–≥–æ. –¢–µ—Ä–ø–µ–Ω–∏–µ –∏ –º–µ—Ç–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å—É—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."]
                },
                (1, 2): {
                    "ru": ["üöß –í–æ–∑–º–æ–∂–Ω—ã —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–ª–∏ –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ–º. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ–π –∏ –∏–∑–±–µ–≥–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é.",
                           "üôÖ‚Äç‚ôÄÔ∏è –î–µ–Ω—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞–∂–Ω—ã—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –õ—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –∏—Ö –Ω–∞ –ø–æ—Ç–æ–º, –∫–æ–≥–¥–∞ –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –±–æ–ª–µ–µ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω—ã."]
                }
            },
            TEXTS[lang]["horoscope_finance"]: {
                (8, 10): {
                    "ru": ["üí∞ –í–∞—Å –∂–¥–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—Å–ø–µ—Ö! –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥, –æ—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–ª–∏ —É–¥–∞—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏!",
                           "üí∏ –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –∏ –∫—Ä—É–ø–Ω—ã—Ö, –¥–∞–≤–Ω–æ –∂–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫. –í–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —á—É—Ç—å–µ —Å–µ–≥–æ–¥–Ω—è –æ–±–æ—Å—Ç—Ä–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –º—É–¥—Ä–æ."]
                },
                (5, 7): {
                    "ru": ["üí≥ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞. –ù–µ–±–æ–ª—å—à–∏–µ —Ç—Ä–∞—Ç—ã –Ω–µ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à –±—é–¥–∂–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞, —á—Ç–æ–±—ã –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.",
                           "üìà –ï—Å—Ç—å —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –æ—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å."]
                },
                (3, 4): {
                    "ru": ["üìâ –°–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏—Ç –±—ã—Ç—å —ç–∫–æ–Ω–æ–º–Ω–µ–µ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –∫ —Ä–∞—Å—Ö–æ–¥–∞–º. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ–æ–±–¥—É–º–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∏ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ, –Ω–æ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.",
                           "üßê –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–ª–∞–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏."]
                }
            },
            TEXTS[lang]["horoscope_health"]: {
                (8, 10): {
                    "ru": ["üå∏ –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ø–æ–ª–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏–ª! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞, —Å–ø–æ—Ä—Ç–∞ –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã—Ö –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –í–∞—à–µ —Ç–µ–ª–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å!",
                           "üí™ –í–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ. –≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –≤–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –∏ –Ω–∞–ø–æ–ª–Ω—è—é—Ç –≤–∞—Å —Ä–∞–¥–æ—Å—Ç—å—é."]
                },
                (5, 7): {
                    "ru": ["üåø –ó–¥–æ—Ä–æ–≤—å–µ –≤ –Ω–æ—Ä–º–µ. –£–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –Ω–∞–≥—Ä—É–∑–∫–∞–º. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–º —Å–Ω–µ, –æ–Ω ‚Äî –≤–∞—à –ª—É—á—à–∏–π –ø–æ–º–æ—â–Ω–∏–∫.",
                           "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –∏ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–∏–≥–Ω–∞–ª–∞–º —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞. –û–Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ."]
                },
                (3, 4): {
                    "ru": ["üò¥ –í–æ–∑–º–æ–∂–Ω–∞ –ª–µ–≥–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ–Ω—É—Å–∞. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏.",
                           "ü§í –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏—è –º–æ–≥—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–µ–±–µ. –î–∞–π—Ç–µ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏."]
                }
            }
        }
        for (min_score, max_score), desc_dict in descriptions[aspect].items():
            if min_score <= score <= max_score:
                return rng.choice(desc_dict["ru"])
        return ""

    @staticmethod
    def calculate_age(birth_date: datetime) -> int:
        today = datetime.now()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return age

    @staticmethod
    def get_zodiac_sign(birth_date: datetime) -> str:
        month = birth_date.month
        day = birth_date.day

        if (month == 3 and day >= 21) or (month == 4 and day <= 19): return "aries"
        if (month == 4 and day >= 20) or (month == 5 and day <= 20): return "taurus"
        if (month == 5 and day >= 21) or (month == 6 and day <= 20): return "gemini"
        if (month == 6 and day >= 21) or (month == 7 and day <= 22): return "cancer"
        if (month == 7 and day >= 23) or (month == 8 and day <= 22): return "leo"
        if (month == 8 and day >= 23) or (month == 9 and day <= 22): return "virgo"
        if (month == 9 and day >= 23) or (month == 10 and day <= 22): return "libra"
        if (month == 10 and day >= 23) or (month == 11 and day <= 21): return "scorpio"
        if (month == 11 and day >= 22) or (month == 12 and day <= 21): return "sagittarius"
        if (month == 12 and day >= 22) or (month == 1 and day <= 19): return "capricorn"
        if (month == 1 and day >= 20) or (month == 2 and day <= 18): return "aquarius"
        if (month == 2 and day >= 19) or (month == 3 and day <= 20): return "pisces"
        return "aries" # –í–æ–∑–≤—Ä–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    @staticmethod
    def get_year_ending(age: int, lang: str) -> str:
        if age % 10 == 1 and age % 100 != 11:
            return TEXTS["ru"]["years_singular"]
        elif age % 10 >= 2 and age % 10 <= 4 and (age % 100 < 10 or age % 100 >= 20):
            return TEXTS["ru"]["years_plural_2_4"]
        else:
            return TEXTS["ru"]["years_plural_5_plus"]

    @staticmethod
    async def generate(user_id: int) -> str:
        user_data = await get_user_data(user_id)
        lang = user_data.get("lang", "ru")
        
        sign_key = user_data.get('sign', HoroscopeGenerator.get_zodiac_sign(datetime.now()) if user_data.get('birth_date') else "aries")
        today = datetime.now()

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è –¥–Ω—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        seed_str = f"{user_id}_{today.strftime('%Y%m%d')}_{sign_key}".encode()
        seed = int(hashlib.md5(seed_str).hexdigest()[:8], 16)
        rng = random.Random(seed)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å–ø–µ–∫—Ç–æ–≤
        aspects = {
            await get_text_async(user_id, "horoscope_love"): rng.randint(1, 10),
            await get_text_async(user_id, "horoscope_career"): rng.randint(1, 10),
            await get_text_async(user_id, "horoscope_finance"): rng.randint(1, 10),
            await get_text_async(user_id, "horoscope_health"): rng.randint(1, 10)
        }

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
        sign_info = HoroscopeGenerator.SIGNS.get(sign_key, {})
        mood = rng.choice(HoroscopeGenerator.MOODS[lang])
        lucky_color = rng.choice(HoroscopeGenerator.LUCKY_COLORS[lang])
        lucky_number = rng.choice(sign_info.get("lucky_number", [rng.randint(1, 9)]))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_text_async –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        ruling_planet = await get_text_async(user_id, sign_info.get("planet_key", "planet_crystal"))
        lucky_stone = await get_text_async(user_id, sign_info.get("lucky_stone_key", "stone_crystal"))

        available_compatible_signs = HoroscopeGenerator.COMPATIBILITY.get(sign_key, [])
        compatible_signs_keys = rng.sample(available_compatible_signs, k=min(2, len(available_compatible_signs)))
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        compatible_signs = [await get_text_async(user_id, f"sign_{s}") for s in compatible_signs_keys]

        if not compatible_signs:
            compatible_signs.append(await get_text_async(user_id, "compatibility_not_defined"))

        tips = TEXTS[lang].get("horoscope_tips", [])
        if not tips:
            tips = ["–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!", "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º!"]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        horoscope_text = (await get_text_async(user_id, "horoscope_title")).format(emoji=sign_info.get('emoji', '‚ú®')) + "\n\n"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_text_async –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞–∫–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        horoscope_text += (await get_text_async(user_id, "horoscope_sign")).format(sign=await get_text_async(user_id, f"sign_{sign_key}"), element=await get_text_async(user_id, sign_info.get('element_key', ''))) + "\n"
        horoscope_text += (await get_text_async(user_id, "horoscope_date")).format(date=today.strftime('%d %b %Y')) + "\n"

        birth_date_str = user_data.get("birth_date")
        if birth_date_str:
            try:
                birth_date_obj = datetime.strptime(birth_date_str, "%d.%m.%Y")
                age = HoroscopeGenerator.calculate_age(birth_date_obj)
                years_ending = HoroscopeGenerator.get_year_ending(age, lang)
                horoscope_text += (await get_text_async(user_id, "horoscope_age")).format(age=age, years=years_ending) + "\n"
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {birth_date_str}")
        
        horoscope_text += "\n"

        for aspect_name, score in aspects.items():
            rating_emoji = ""
            if score >= 8: rating_emoji = "üåü"
            elif score >= 5: rating_emoji = "‚ú®"
            elif score >= 3: rating_emoji = "‚ö†Ô∏è"
            else: rating_emoji = "üö®"

            description = await HoroscopeGenerator._generate_aspect_description(
                aspect_name,
                score,
                rng,
                lang
            )
            horoscope_text += f"{aspect_name}: {rating_emoji} {score}/10\n<i>\" {description} \"</i>\n\n"

        horoscope_text += (
            (await get_text_async(user_id, "horoscope_mood")).format(mood=mood) + "\n"
            f"{(await get_text_async(user_id, 'horoscope_lucky_color')).format(color=lucky_color)}\n"
            f"{(await get_text_async(user_id, 'horoscope_lucky_number')).format(number=lucky_number)}\n"
            f"{(await get_text_async(user_id, 'horoscope_ruling_planet')).format(planet=ruling_planet)}\n"
            f"{(await get_text_async(user_id, 'horoscope_lucky_stone')).format(stone=lucky_stone)}\n"
            f"{(await get_text_async(user_id, 'horoscope_compatibility')).format(compatible_signs=', '.join(compatible_signs))}\n\n"
            f"{(await get_text_async(user_id, 'horoscope_tip')).format(tip=rng.choice(tips))}\n\n"
            f"<i>{(await get_text_async(user_id, 'horoscope_closing_message'))}</i>"
        )
        return horoscope_text

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboard:
    @staticmethod
    async def main_menu(user_id: int) -> ReplyKeyboardMarkup:
        builder = ReplyKeyboardBuilder()
        builder.button(text=await get_text_async(user_id, "main_menu_horoscope"))
        builder.button(text=await get_text_async(user_id, "main_menu_settings"))
        builder.button(text=await get_text_async(user_id, "main_menu_support"))
        builder.button(text=await get_text_async(user_id, "main_menu_entertainment"))
        builder.adjust(2)
        return builder.as_markup(resize_keyboard=True)

    @staticmethod
    async def settings_menu(user_id: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text=await get_text_async(user_id, "settings_change_sign"), callback_data="change_sign")
        builder.button(text=await get_text_async(user_id, "settings_set_birth_date"), callback_data="set_birth_date")
        builder.button(text=await get_text_async(user_id, "settings_change_language"), callback_data="change_language")
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def sign_selection_menu(user_id: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        signs_list = list(HoroscopeGenerator.SIGNS.keys())
        for i in range(0, len(signs_list), 3):
            row_buttons = []
            for sign_key in signs_list[i:i+3]:
                sign_info = HoroscopeGenerator.SIGNS[sign_key]
                row_buttons.append(types.InlineKeyboardButton(text=f"{sign_info['emoji']} {await get_text_async(user_id, f'sign_{sign_key}')}", callback_data=f"set_sign_{sign_key}"))
            builder.row(*row_buttons)
        return builder.as_markup()

    @staticmethod
    async def language_selection_menu(user_id: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def entertainment_menu(user_id: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text=await get_text_async(user_id, "cookie_button"), callback_data="get_cookie_fortune")
        builder.button(text=await get_text_async(user_id, "magic_ball_button"), callback_data="ask_magic_ball")
        builder.adjust(1)
        return builder.as_markup()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–∞, —Ç.–∫. —Ç–æ–ª—å–∫–æ RU) ---
def get_user_initial_language_code(message: types.Message) -> str:
    return "ru"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id) 

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if not user_data.get("sign") or not user_data.get("lang") or not user_data.get("birth_date"):
        initial_lang = get_user_initial_language_code(message)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è MongoDB
        user_id_str = str(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if users_collection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
            referrer_id = None
            if message.text and len(message.text.split()) > 1:
                potential_referrer_id = message.text.split()[1]
                if potential_referrer_id != user_id_str: # –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –±—ã—Ç—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
                    referrer_exists = await users_collection.find_one({"_id": potential_referrer_id})
                    if referrer_exists:
                        referrer_id = potential_referrer_id
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                        await users_collection.update_one(
                            {"_id": referrer_id},
                            {"$addToSet": {"referrals": user_id_str}}
                        )
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {referrer_id}")
                    else:
                        logger.warning(f"–†–µ—Ñ–µ—Ä–µ—Ä {potential_referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str} –ø–æ–ø—ã—Ç–∞–ª—Å—è –±—ã—Ç—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.")

            await users_collection.update_one(
                {"_id": user_id_str},
                {"$setOnInsert": { # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ
                    "username": message.from_user.username,
                    "first_name": message.from_user.first_name,
                    "last_name": message.from_user.last_name,
                    "registration_date": datetime.now(),
                    "balance": 0,
                    "referrals": [],
                    "referrer_id": referrer_id, # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    "sign": user_data.get("sign", "aries"), # –ë–µ—Ä–µ–º –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
                    "lang": initial_lang,
                    "birth_date": user_data.get("birth_date", None)
                }},
                upsert=True # –í—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            )
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            if not user_data.get("birth_date"):
                await message.answer(
                    "–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Å—Ç—Ä–æ-–±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.",
                    reply_markup=await Keyboard.main_menu(user_id)
                )
                await message.answer("–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000).")
                await dp.get_current().fsm_context.set_state(Form.set_birth_date)
            else:
                await message.answer(
                    await get_text_async(user_id, "welcome"),
                    reply_markup=await Keyboard.main_menu(user_id),
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            await message.answer(
                await get_text_async(user_id, "welcome"),
                reply_markup=await Keyboard.main_menu(user_id),
                parse_mode="HTML"
            )
            logger.warning(f"MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            await get_text_async(user_id, "welcome"),
            reply_markup=await Keyboard.main_menu(user_id),
            parse_mode="HTML"
        )


@dp.message(F.text.in_({TEXTS["ru"]["main_menu_horoscope"]}))
async def send_horoscope(message: types.Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    if not user_data.get("birth_date"):
        await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        await dp.get_current().fsm_context.set_state(Form.set_birth_date)
        return

    horoscope = await HoroscopeGenerator.generate(user_id)

    bottom_buttons_builder = InlineKeyboardBuilder()
    bottom_buttons_builder.button(text=await get_text_async(user_id, "main_menu_support"), callback_data="show_donate_from_horoscope")
    
    me = await bot.get_me()
    bot_username = me.username
    share_text_encoded = SHARE_MESSAGE_RU.format(url=f"https://t.me/{bot_username}").replace(" ", "%20").replace("\n", "%0A")

    bottom_buttons_builder.button(
        text="üíå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", 
        url=f"https://t.me/share/url?url=https://t.me/{bot_username}&text={share_text_encoded}"
    )
    
    bottom_buttons_builder.adjust(2)

    await message.answer(
        horoscope,
        parse_mode="HTML",
        reply_markup=bottom_buttons_builder.as_markup()
    )


@dp.message(F.text.in_({TEXTS["ru"]["main_menu_settings"]}))
async def settings_menu(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        await get_text_async(user_id, "settings_menu_choose"),
        reply_markup=await Keyboard.settings_menu(user_id)
    )

@dp.callback_query(F.data == "change_sign")
async def request_sign_change(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text(
        await get_text_async(user_id, "choose_sign"),
        reply_markup=await Keyboard.sign_selection_menu(user_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_sign_"))
async def set_user_sign(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    new_sign = callback.data.split("_")[2]
    
    await update_user_data(user_id, "sign", new_sign)

    await callback.message.edit_text(
        (await get_text_async(user_id, "sign_set_success")).format(sign=await get_text_async(user_id, f"sign_{new_sign}")),
        parse_mode="HTML"
    )
    await callback.answer(await get_text_async(user_id, "sign_changed_answer"))

@dp.callback_query(F.data == "set_birth_date")
async def request_birth_date(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.message.edit_text(
        await get_text_async(user_id, "birth_date_prompt")
    )
    await state.set_state(Form.set_birth_date)
    await callback.answer()

@dp.message(Form.set_birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    birth_date_str = message.text

    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", birth_date_str):
        await message.answer(await get_text_async(user_id, "birth_date_invalid_format"))
        return

    try:
        birth_date_obj = datetime.strptime(birth_date_str, "%d.%m.%Y")
        if birth_date_obj > datetime.now():
            await message.answer(await get_text_async(user_id, "birth_date_future_error"))
            return
        
        await update_user_data(user_id, "birth_date", birth_date_str)
        calculated_sign = HoroscopeGenerator.get_zodiac_sign(birth_date_obj)
        await update_user_data(user_id, "sign", calculated_sign)

        await message.answer(
            (await get_text_async(user_id, "birth_date_success")).format(birth_date=birth_date_str),
            parse_mode="HTML",
            reply_markup=await Keyboard.main_menu(user_id)
        )
        await state.clear()
    except ValueError:
        await message.answer(await get_text_async(user_id, "birth_date_invalid_format"))

@dp.callback_query(F.data == "change_language")
async def request_language_change(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text(
        await get_text_async(user_id, "choose_language_prompt"),
        reply_markup=await Keyboard.language_selection_menu(user_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_lang_"))
async def set_user_language(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    new_lang = callback.data.split("_")[2]
    
    await update_user_data(user_id, "lang", new_lang)
    
    lang_name = "–†—É—Å—Å–∫–∏–π" # –¢–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ RU

    await callback.message.edit_text(
        (await get_text_async(user_id, "language_set_success")).format(lang_name=lang_name),
        parse_mode="HTML"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
    await callback.message.answer(
        await get_text_async(user_id, "welcome"),
        reply_markup=await Keyboard.main_menu(user_id),
        parse_mode="HTML"
    )
    await callback.answer(await get_text_async(user_id, "language_changed_answer"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@dp.message(F.text.in_({TEXTS["ru"]["main_menu_support"]}))
@dp.callback_query(F.data == "show_donate_from_horoscope")
async def support_us_menu(update: types.Message | types.CallbackQuery):
    user_id = update.from_user.id
    
    message_to_edit = None
    if isinstance(update, types.CallbackQuery):
        message_to_edit = update.message
        await update.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫

    builder = InlineKeyboardBuilder()
    builder.button(text=await get_text_async(user_id, "donate_open_wallet"), url="https://t.me/wallet")
    builder.button(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data="copy_ton_wallet") 
    builder.button(text=await get_text_async(user_id, "donate_closed"), callback_data="close_donate_message")
    builder.adjust(1)

    text = (await get_text_async(user_id, "support_us_prompt")).format(wallet=TON_WALLET)

    if message_to_edit:
        await message_to_edit.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    else:
        await update.answer(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data == "copy_ton_wallet")
async def copy_ton_wallet(callback: types.CallbackQuery):
    await callback.answer(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON:\n{TON_WALLET}\n\n(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)", show_alert=True)

@dp.callback_query(F.data == "close_donate_message")
async def close_donate_message(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–Ω–∞—Ç–æ–º
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞ –¥–ª—è {user_id}: {e}")
    await callback.answer(await get_text_async(user_id, "donate_closed"))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
@dp.message(F.text.in_({TEXTS["ru"]["main_menu_entertainment"]}))
async def entertainment_menu(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        await get_text_async(user_id, "entertainment_menu_choose"),
        reply_markup=await Keyboard.entertainment_menu(user_id)
    )

@dp.callback_query(F.data == "get_cookie_fortune")
async def get_cookie_fortune(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    fortune = random.choice(HoroscopeGenerator.COOKIE_FORTUNES)
    await callback.message.edit_text(
        (await get_text_async(user_id, "cookie_fortune_message")).format(fortune=fortune),
        parse_mode="HTML",
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å
    )
    await callback.answer("–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")

@dp.callback_query(F.data == "ask_magic_ball")
async def ask_magic_ball(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.message.edit_text(
        await get_text_async(user_id, "magic_ball_question_prompt"),
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    )
    await state.set_state(Form.magic_ball_answer)
    await callback.answer("–®–∞—Ä –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å!")

@dp.message(Form.magic_ball_answer)
async def process_magic_ball_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text
    if not question.strip().endswith("?"):
        await message.answer(await get_text_async(user_id, "magic_ball_not_a_question"))
        return

    answer_type = random.choices(["positive", "negative", "neutral"], weights=[0.5, 0.3, 0.2], k=1)[0]
    answer = random.choice(HoroscopeGenerator.MAGIC_BALL_ANSWERS[answer_type])

    await message.answer(
        (await get_text_async(user_id, "magic_ball_answer_message")).format(answer=answer),
        parse_mode="HTML",
        reply_markup=await Keyboard.main_menu(user_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    )
    await state.clear()


# –†–µ–∫–ª–∞–º–∞
async def show_ads(user_id: int):
    try:
        if ADSGRAM_API_KEY and random.randint(1, 5) == 1:
            builder = InlineKeyboardBuilder()
            builder.button(text=await get_text_async(user_id, "ad_button"), url="https://example.com") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

            await bot.send_message(
                user_id,
                await get_text_async(user_id, "ad_text"),
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        elif not ADSGRAM_API_KEY:
            logger.debug("ADSGRAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–µ–∫–ª–∞–º–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ (–ª–æ–≥–∏–∫–∞)
async def scheduled_tasks():
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤.")
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MONGO_URI –∑–∞–¥–∞–Ω –∏ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
    if users_collection:
        users_cursor = users_collection.find({})
        users_list = await users_cursor.to_list(length=None) # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        for user_doc in users_list:
            user_id = int(user_doc["_id"]) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ int –¥–ª—è aiogram
            try:
                horoscope = await HoroscopeGenerator.generate(user_id)
                
                bottom_buttons_builder = InlineKeyboardBuilder()
                bottom_buttons_builder.button(text=await get_text_async(user_id, "main_menu_support"), callback_data="show_donate_from_horoscope")
                
                me = await bot.get_me()
                bot_username = me.username
                share_text_encoded = SHARE_MESSAGE_RU.format(url=f"https://t.me/{bot_username}").replace(" ", "%20").replace("\n", "%0A")
                bottom_buttons_builder.button(
                    text="üíå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", 
                    url=f"https://t.me/share/url?url=https://t.me/{bot_username}&text={share_text_encoded}"
                )
                bottom_buttons_builder.adjust(2)

                await bot.send_message(user_id, horoscope, parse_mode="HTML", reply_markup=bottom_buttons_builder.as_markup())
                await show_ads(user_id)
                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
    else:
        logger.warning("MongoDB users_collection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# --- HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è cron-–∑–∞–¥–∞—á–∏ ---
async def cron_job_handler(request: web.Request):
    CRON_SECRET_KEY = os.getenv("CRON_SECRET_KEY") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–∞–Ω–∞ –Ω–∞ Render
    if not CRON_SECRET_KEY:
        logger.error("CRON_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ—Å—Ç—É–ø –∫ cron_job_handler –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return web.Response(status=403, text="Forbidden: CRON_SECRET_KEY not set.")

    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /run_daily_horoscopes –±–µ–∑ Bearer —Ç–æ–∫–µ–Ω–∞.")
        return web.Response(status=401, text="Unauthorized: Bearer token missing.")

    provided_key = auth_header.split(' ')[1]
    if provided_key != CRON_SECRET_KEY:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π CRON_SECRET_KEY. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {provided_key[:5]}... –û–∂–∏–¥–∞–ª–æ—Å—å: {CRON_SECRET_KEY[:5]}...")
        return web.Response(status=403, text="Forbidden: Invalid secret key.")

    logger.info("Cron job handler triggered!")
    # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
    try:
        await scheduled_tasks()
        return web.Response(text="Cron job executed successfully!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}", exc_info=True)
        return web.Response(status=500, text=f"Internal Server Error: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ Render)
async def on_startup(passed_bot: Bot) -> None:
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    await init_mongodb() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MongoDB –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
    if WEBHOOK_URL:
        try:
            await passed_bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
            # –ù–µ —Ñ–∞—Ç–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    else:
        logger.error("WEBHOOK_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_HOST –∑–∞–¥–∞–Ω–∞ –Ω–∞ Render.")

@app.post(WEBHOOK_PATH)
async def bot_webhook(request: Request):
    telegram_update = types.Update(**await request.json())
    await dp.feed_update(bot=bot, update=telegram_update)
    return {'ok': True}

@app.get("/")
async def root():
    return {"message": "AstroX API is running"}


# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def on_shutdown(passed_bot: Bot) -> None:
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    if mongo_client:
        mongo_client.close()
        logger.info("MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")


# --- –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø RENDER (WEBHOOK/AIOHTTP) –ò –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò (LONG-POLLING) ---
async def main():
    await on_startup(bot) # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º on_shutdown –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    dp.shutdown.register(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ WEBHOOK_HOST –∏ WEB_SERVER_PORT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if WEBHOOK_HOST and WEB_SERVER_PORT:
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT} (–¥–ª—è Render).")

        web_app = web.Application()

        # --- –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK –î–õ–Ø AIOGRAM 3.X –° AIOHTTP ---
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
            handle_http_errors=True, # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        )
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –ø–æ WEBHOOK_PATH
        webhook_requests_handler.register(web_app, path=WEBHOOK_PATH)
        # --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK ---

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è cron-–∑–∞–¥–∞—á–∏
        web_app.add_routes([web.get('/run_daily_horoscopes', cron_job_handler)])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp (–Ω–∞–ø—Ä–∏–º–µ—Ä, graceful shutdown)
        setup_application(web_app, dp, bot=bot) 

        runner = web.AppRunner(web_app)
        await runner.setup()
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (0.0.0.0) –∏ –ø–æ—Ä—Ç—É –æ—Ç Render
        site = web.TCPSite(runner, host='0.0.0.0', port=int(WEB_SERVER_PORT))
        await site.start()

        logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}")
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await asyncio.Event().wait()
    else:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_HOST –∏–ª–∏ PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long-polling.")
        # –ï—Å–ª–∏ WEBHOOK_HOST –∏–ª–∏ WEB_SERVER_PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ),
        # –∑–∞–ø—É—Å–∫–∞–µ–º long-polling
        try:
            await dp.start_polling(bot, drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ long-polling: {e}", exc_info=True)


if __name__ == "__main__":
    # –≠—Ç–∞ —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ main()
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
