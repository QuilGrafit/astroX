# -*- coding: utf-8 -*-
import os
import logging
import asyncio
from datetime import datetime, timedelta

from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)

from motor.motor_asyncio import AsyncIOMotorClient

# =================================================================================
# 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =================================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URL = os.getenv("MONGO_URL")
WEBHOOK_DOMAIN = os.getenv("WEBHOOK_DOMAIN") # –ù–∞–ø—Ä–∏–º–µ—Ä, 'astrox-mfuk.onrender.com'
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8080)) # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, MONGO_URL, WEBHOOK_DOMAIN]):
    logging.critical("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, MONGO_URL, WEBHOOK_DOMAIN) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    exit()

# –ü—É—Ç–∏ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"
ALLOWED_UPDATES = ["message", "callback_query"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
app = FastAPI()
db_client = None
db = None

# =================================================================================
# 2. –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (MongoDB)
# =================================================================================

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB."""
    global db_client, db
    try:
        db_client = AsyncIOMotorClient(MONGO_URL)
        db = db_client.sample_mflix # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö sample_mflix
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await db_client.admin.command('ping')
        logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: {e}")
        raise

async def close_db():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    if db_client:
        db_client.close()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.")

async def get_user_data(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'users'."""
    if db:
        return await db.users.find_one({"user_id": user_id})
    return None

async def update_user_data(user_id: int, data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'users'."""
    if db:
        await db.users.update_one({"user_id": user_id}, {"$set": data}, upsert=True)

# =================================================================================
# 3. –õ–û–ì–ò–ö–ê –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ò –í–ï–ë–•–£–ö–ê (FastAPI)
# =================================================================================

@app.on_event("startup")
async def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    await init_db()
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
    await bot.set_webhook(
        url=WEBHOOK_URL,
        allowed_updates=ALLOWED_UPDATES,
        drop_pending_updates=True # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    )
    logging.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook()
    await close_db()
    logging.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω. –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@app.post(WEBHOOK_PATH)
async def bot_webhook(request: Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram,
    –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram.
    """
    try:
        telegram_update = types.Update(**await request.json())
        await dp.feed_update(bot=bot, update=telegram_update)
        return {"ok": True}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {"ok": False, "error": str(e)}, 500

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞."""
    return {"message": "AstroX Bot API is running"}

# =================================================================================
# 4. –ö–õ–ê–í–ò–ê–¢–£–†–´
# =================================================================================
# –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

def get_main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÆ –ì–∞–¥–∞–Ω–∏–µ", callback_data="divination_menu")],
        [InlineKeyboardButton(text="‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", callback_data="personal_horoscope")],
        [InlineKeyboardButton(text="üåü –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞", callback_data="rate_bot")]
    ])

def get_divination_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="card_of_the_day")],
        [InlineKeyboardButton(text="–î–∞ –∏–ª–∏ –ù–µ—Ç", callback_data="yes_no")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

# ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—à–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä ...
# –Ø –Ω–µ –±—É–¥—É –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤—Å–µ –∑–¥–µ—Å—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å.
# –ü—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏.

# =================================================================================
# 5. –ú–ê–®–ò–ù–´ –°–û–°–¢–û–Ø–ù–ò–ô (FSM)
# =================================================================================

class UserProfile(StatesGroup):
    waiting_for_name = State()
    waiting_for_dob = State()
    waiting_for_gender = State()

# =================================================================================
# 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò AIOGRAM (–•–µ–Ω–¥–ª–µ—Ä—ã)
# =================================================================================

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command("start"))
async def handle_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    
    if user_data:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!", reply_markup=get_main_menu_keyboard())
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.set_state(UserProfile.waiting_for_name)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroX! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---

@dp.message(UserProfile.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UserProfile.waiting_for_dob)
    await message.answer("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.06.2025).")

@dp.message(UserProfile.waiting_for_dob)
async def process_dob(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(dob=message.text)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ])
        await state.set_state(UserProfile.waiting_for_gender)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.", reply_markup=keyboard)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

@dp.callback_query(StateFilter(UserProfile.waiting_for_gender))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—Å–∫–æ–π" if callback_query.data == "gender_male" else "–ñ–µ–Ω—Å–∫–∏–π"
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    final_user_data = {
        "user_id": callback_query.from_user.id,
        "username": callback_query.from_user.username,
        "name": user_data.get('name'),
        "dob": user_data.get('dob'),
        "gender": gender,
        "registration_date": datetime.now()
    }
    await update_user_data(callback_query.from_user.id, final_user_data)
    
    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await callback_query.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∑–≤–µ–∑–¥ ‚ú®")
    await callback_query.message.answer("–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    await callback_query.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---

@dp.callback_query(lambda c: c.data == 'main_menu')
async def go_to_main_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == 'divination_menu')
async def show_divination_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è:", reply_markup=get_divination_menu_keyboard())
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == 'card_of_the_day')
async def get_card_of_the_day(callback_query: CallbackQuery):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
    await callback_query.answer("–í—ã—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è...", show_alert=True)
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_text("–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: '–°–æ–ª–Ω—Ü–µ'. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—Ö –∏ —Ä–∞–¥–æ—Å—Ç—å! \n\n–•–æ—Ç–∏—Ç–µ –µ—â–µ –≥–∞–¥–∞–Ω–∏–µ?", reply_markup=get_divination_menu_keyboard())

@dp.callback_query(lambda c: c.data == 'profile')
async def show_profile(callback_query: CallbackQuery):
    user_data = await get_user_data(callback_query.from_user.id)
    if user_data:
        profile_text = (
            f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"**–ò–º—è:** {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"**–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {user_data.get('dob', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"**–ü–æ–ª:** {user_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await callback_query.message.edit_text(profile_text, reply_markup=keyboard)
    else:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start", show_alert=True)
    await callback_query.answer()


# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
# ...


# =================================================================================
# 7. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê
# =================================================================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    logging.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Uvicorn...")
    uvicorn.run(
        app,
        host=WEB_SERVER_HOST,
        port=WEB_SERVER_PORT
    )

if __name__ == "__main__":
    main()
